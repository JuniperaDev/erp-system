# GitHub Actions Workflow for Terraform CI/CD
# This workflow validates, plans, and applies Terraform configurations
# Copy this file to .github/workflows/terraform-ci.yml and customize as needed

name: Terraform CI/CD

on:
  pull_request:
    branches: [main, master]
    paths: ['terraform/**']
  push:
    branches: [main, master]
    paths: ['terraform/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/
      
      - name: Terraform Validate - Dev
        run: |
          cd terraform/environments/dev
          terraform init -backend=false
          terraform validate
      
      - name: Terraform Validate - Staging
        run: |
          cd terraform/environments/staging
          terraform init -backend=false
          terraform validate
      
      - name: Terraform Validate - Prod
        run: |
          cd terraform/environments/prod
          terraform init -backend=false
          terraform validate

  terraform-security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
      
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  terraform-plan-dev:
    name: Terraform Plan - Dev
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init
      
      - name: Terraform Plan
        run: |
          cd terraform/environments/dev
          terraform plan -var-file="terraform.tfvars" -out=tfplan
      
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-dev
          path: terraform/environments/dev/tfplan

  terraform-apply-dev:
    name: Terraform Apply - Dev
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init
      
      - name: Terraform Apply
        run: |
          cd terraform/environments/dev
          terraform apply -var-file="terraform.tfvars" -auto-approve
      
      - name: Post-deployment Tests
        run: |
          # Add infrastructure validation tests here
          echo "Running post-deployment validation..."
          # Example: Test AKS cluster connectivity
          # az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME
          # kubectl get nodes

  terraform-apply-staging:
    name: Terraform Apply - Staging
    runs-on: ubuntu-latest
    needs: terraform-apply-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd terraform/environments/staging
          terraform init
      
      - name: Terraform Apply
        run: |
          cd terraform/environments/staging
          terraform apply -var-file="terraform.tfvars" -auto-approve

  terraform-apply-prod:
    name: Terraform Apply - Production
    runs-on: ubuntu-latest
    needs: terraform-apply-staging
    if: github.event.inputs.environment == 'prod' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-prod]'))
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd terraform/environments/prod
          terraform init
      
      - name: Terraform Plan
        run: |
          cd terraform/environments/prod
          terraform plan -var-file="terraform.tfvars" -out=tfplan
      
      - name: Manual Approval Required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
      
      - name: Terraform Apply
        run: |
          cd terraform/environments/prod
          terraform apply tfplan
